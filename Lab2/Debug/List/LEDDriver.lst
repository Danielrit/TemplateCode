###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           19/Nov/2015  14:35:12
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  H:\My Documents\EE312\TemplateCode\Lab2\LEDDriver.c
#    Command line  =  
#        "H:\My Documents\EE312\TemplateCode\Lab2\LEDDriver.c" -lcN "H:\My
#        Documents\EE312\TemplateCode\Lab2\Debug\List\" -o "H:\My
#        Documents\EE312\TemplateCode\Lab2\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR4133__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\430\lib\dlib\dl430xlsfn.h" -I "H:\My
#        Documents\EE312\TemplateCode\Lab2\..\" -I "H:\My
#        Documents\EE312\TemplateCode\Lab2\..\driverlib\MSP430FR2xx_4xx\"
#        --core=430X --data_model=small -Ol --hw_workaround=CPU40 --segment
#        __data16=DATA16 --segment __data20=DATA20 --code_model=large
#    List file     =  
#        H:\My Documents\EE312\TemplateCode\Lab2\Debug\List\LEDDriver.lst
#    Object file   =  
#        H:\My Documents\EE312\TemplateCode\Lab2\Debug\Obj\LEDDriver.r43
#
###############################################################################

H:\My Documents\EE312\TemplateCode\Lab2\LEDDriver.c
      1          /**************************************************
      2           * LEDDriver.c
      3           * Drives LED display
      4           *
      5           * Copyright 2015 University of Strathclyde
      6           *
      7           *
      8           **************************************************/
      9          
     10          #include "LedDriver.h"
     11          
     12          //Current dial value
     13          unsigned char ledValue_ = 0;
     14          
     15          /**
     16          Initialise LED Dial, setting GPIO parameters
     17          */
     18          void initialiseLedDial()
     19          {
     20            //GPIO 2.7
     21            GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN7);
     22              
     23            //GPIO 5.1, 5.2, 5.3
     24            //Inserted by student
     25             GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN2|GPIO_PIN3);
     26            //GPIO 8.0
     27            //Inserted by student
     28            GPIO_setAsOutputPin(GPIO_PORT_P8, GPIO_PIN0); 
     29          }
     30          
     31          /** 
     32          Refresh the display
     33          */
     34          void refreshLedDial()
     35          {
     36            //Refresh lower bank (LEDs 1-4)
     37          
     38            //LED 1
     39            if (ledValue_==1)  
     40            {
     41              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     42              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN2|GPIO_PIN3);
     43              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     44            }  
     45            //LED 2 
     46            if (ledValue_==2)
     47            {
     48              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     49              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2|GPIO_PIN3);
     50              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     51              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     52            }
     53            //LED 3 
     54            if (ledValue_==3)
     55            {
     56              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     57              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN3);
     58              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2);
     59              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     60            }
     61            //LED 4
     62            if (ledValue_==4)
     63            {
     64              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     65              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN2);
     66              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     67              GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     68            } 
     69            __delay_cycles(10000);  //Delay 10ms
     70            //Refresh lower bank (LEDs 5-9)
     71            //LED 5    
     72            if (ledValue_==5)
     73            {
     74              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     75              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN2);
     76              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     77              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     78            } 
     79            
     80            //LED 6
     81            if (ledValue_==6)
     82            {
     83              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     84              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN3);
     85              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN2);
     86              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     87            } 
     88            
     89            //LED 7
     90            if (ledValue_==7)
     91            {
     92              GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     93              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN2|GPIO_PIN3);
     94              GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     95              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     96            }
     97            
     98            //LED 8
     99            if (ledValue_==8)  
    100            {
    101              GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
    102              GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1|GPIO_PIN2|GPIO_PIN3);
    103              GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
    104            }
    105            
    106              __delay_cycles(10000);  //Delay 10ms
    107          }
    108          
    109          /** 
    110          Set dial value
    111          */
    112          void setLedDial(unsigned char value)
    113          {
    114            ledValue_ = value;
    115          }
    116          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   initialiseLedDial
        0   -> GPIO_setAsOutputPin
        4   -> GPIO_setAsOutputPin
      4   refreshLedDial
        4   -> GPIO_setOutputHighOnPin
        4   -> GPIO_setOutputLowOnPin
      4   setLedDial


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  initialiseLedDial
       1  ledValue_
     378  refreshLedDial
       6  setLedDial

 
 414 bytes in segment CODE
   1 byte  in segment DATA16_Z
 
 414 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
